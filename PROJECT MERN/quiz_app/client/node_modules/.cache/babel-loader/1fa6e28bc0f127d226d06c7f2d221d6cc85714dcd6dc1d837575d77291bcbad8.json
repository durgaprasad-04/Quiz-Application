{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEuseState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport data from \"../database/data\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    (async () => {\n      try {\n        let question = await data;\n        if (question.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: question\n          }));\n          dispatch(Action.startExamAction(question));\n        } else {\n          throw new Error(\"No Question Available\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n_s(useFetchQestion, \"rWkKqk8LvfGgOiObU76PA8rIing=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEuseState","useDispatch","data","Action","useFetchQestion","_s","dispatch","getData","setGetData","useState","isLoading","apiData","serverError","useEffect","prev","question","length","startExamAction","Error","error"],"sources":["D:/DURGAPRASAD FILES/PROJECT MERN/quiz_app/client/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEuseState } from \"react\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport data from \"../database/data\";\r\n\r\n/** redux actions */\r\nimport * as Action from '../redux/question_reducer'\r\n\r\n\r\nexport const useFetchQestion = () => {\r\n    const dispatch = useDispatch(); \r\nconst [getData, setGetData] =useState({ isLoading : false ,apiData:[],serverError :null})\r\n\r\n    useEffect(() => {\r\n        setGetData(prev => ({...prev, isLoading : true}));\r\n\r\n\r\n        (async () => {\r\n            try {\r\nlet question = await data;\r\n\r\nif(question.length > 0) { \r\n    setGetData(prev => ({\r\n        ...prev, isLoading:false}));\r\n        setGetData(prev => ({\r\n            ...prev, apiData:question}));\r\n\r\n            dispatch(Action.startExamAction(question))\r\n    } else{\r\n        throw new Error(\"No Question Available\");\r\n    }\r\n            }catch (error){\r\n                setGetData(prev => ({\r\n                    ...prev, isLoading:false}));\r\n                    setGetData(prev => ({\r\n                        ...prev, serverError:error}));\r\n                }\r\n\r\n                })();\r\n            },[dispatch]);\r\n            return [getData, setGetData];\r\n        }"],"mappings":";AAAA,SAASA,YAAY,QAAQ,OAAO;AACpC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,IAAI,MAAM,kBAAkB;;AAEnC;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;AAGnD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAClC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAEC,QAAQ,CAAC;IAAEC,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAC,EAAE;IAACC,WAAW,EAAE;EAAI,CAAC,CAAC;EAErFC,SAAS,CAAC,MAAM;IACZL,UAAU,CAACM,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEJ,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;IAGjD,CAAC,YAAY;MACT,IAAI;QAChB,IAAIK,QAAQ,GAAG,MAAMb,IAAI;QAEzB,IAAGa,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UACpBR,UAAU,CAACM,IAAI,KAAK;YAChB,GAAGA,IAAI;YAAEJ,SAAS,EAAC;UAAK,CAAC,CAAC,CAAC;UAC3BF,UAAU,CAACM,IAAI,KAAK;YAChB,GAAGA,IAAI;YAAEH,OAAO,EAACI;UAAQ,CAAC,CAAC,CAAC;UAE5BT,QAAQ,CAACH,MAAM,CAACc,eAAe,CAACF,QAAQ,CAAC,CAAC;QAClD,CAAC,MAAK;UACF,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACQ,CAAC,QAAOC,KAAK,EAAC;QACVX,UAAU,CAACM,IAAI,KAAK;UAChB,GAAGA,IAAI;UAAEJ,SAAS,EAAC;QAAK,CAAC,CAAC,CAAC;QAC3BF,UAAU,CAACM,IAAI,KAAK;UAChB,GAAGA,IAAI;UAAEF,WAAW,EAACO;QAAK,CAAC,CAAC,CAAC;MACrC;IAEA,CAAC,EAAE,CAAC;EACR,CAAC,EAAC,CAACb,QAAQ,CAAC,CAAC;EACb,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;AAAAH,EAAA,CAhCID,eAAe;EAAA,QACPH,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}