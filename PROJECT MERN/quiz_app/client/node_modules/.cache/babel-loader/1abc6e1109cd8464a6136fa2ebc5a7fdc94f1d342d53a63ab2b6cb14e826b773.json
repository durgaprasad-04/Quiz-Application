{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\nimport { getData, setGetData } from './';\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/api/questions`, data => data);\n        if (questions.length > 0) {\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","getData","setGetData","Action","useFetchQestion","_s","dispatch","prev","isLoading","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","serverError","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["D:/DURGAPRASAD FILES/PROJECT MERN/quiz_app/client/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getServerData } from \"../helper/helper\";\r\nimport {getData,setGetData} from './'\r\n/** redux actions */\r\nimport * as Action from '../redux/question_reducer'\r\n\r\n/** fetch question hook to fetch api data and set value to store */\r\nexport const useFetchQestion = () => {\r\n    const dispatch = useDispatch();   \r\n    \r\n\r\n    useEffect(() => {\r\n        setGetData(prev => ({...prev, isLoading : true}));\r\n\r\n        /** async function fetch backend data */\r\n        (async () => {\r\n            try {\r\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/api/questions`, (data) => data)\r\n                \r\n                if(questions.length > 0){\r\n                   \r\n                    /** dispatch an action */\r\n                    dispatch(Action.startExamAction({ question : questions, answers }))\r\n\r\n                } else{\r\n                    throw new Error(\"No Question Avalibale\");\r\n                }\r\n            } catch (error) {\r\n                setGetData(prev => ({...prev, isLoading : false}));\r\n                setGetData(prev => ({...prev, serverError : error}));\r\n            }\r\n        })();\r\n    }, [dispatch]);\r\n\r\n    return [getData, setGetData];\r\n}\r\n\r\n\r\n/** MoveAction Dispatch function */\r\nexport const MoveNextQuestion = () => async (dispatch) => {\r\n    try {\r\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n/** PrevAction Dispatch function */\r\nexport const MovePrevQuestion = () => async (dispatch) => {\r\n    try {\r\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAAQC,OAAO,EAACC,UAAU,QAAO,IAAI;AACrC;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAG9BF,SAAS,CAAC,MAAM;IACZK,UAAU,CAACK,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEC,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEC,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMV,aAAa,CAAE,GAAEW,OAAO,CAACC,GAAG,CAACC,yBAA0B,gBAAe,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UAEpB;UACAT,QAAQ,CAACH,MAAM,CAACa,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZjB,UAAU,CAACK,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEC,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDN,UAAU,CAACK,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEa,WAAW,EAAGD;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACb,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACL,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAG,EAAA,CA/BaD,eAAe;EAAA,QACPL,WAAW;AAAA;AA+BhC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOf,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACmB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}