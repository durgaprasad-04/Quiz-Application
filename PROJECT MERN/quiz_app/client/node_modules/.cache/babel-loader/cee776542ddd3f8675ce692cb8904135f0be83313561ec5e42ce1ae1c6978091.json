{"ast":null,"code":"var _jsxFileName = \"D:\\\\DURGAPRASAD FILES\\\\PROJECT MERN\\\\quiz_app\\\\client\\\\src\\\\component\\\\Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useDispatch } from 'react';\nimport { useFetchQestion } from '../hooks/FetchQuestion';\nimport { useSelector } from 'react-redux';\nimport { updateResultAction } from '../redux/result_reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questions({\n  onChecked\n}) {\n  _s();\n  const [checked, setChecked] = useState(undefined);\n  const {\n    trace\n  } = useSelector(state => state.questions);\n  const [{\n    isLoading,\n    apiData,\n    serverError\n  }] = useFetchQestion();\n  const questions = useSelector(state => state.questions.queue[state.questions.trace]);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(updateResultAction({\n      trace,\n      checked\n    }));\n  }, [dispatch]);\n  function onSelect(i) {\n    onChecked(i);\n    setChecked(i);\n  }\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"text-light\",\n    children: \"isLoading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 30\n  }, this);\n  if (serverError) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"text-light\",\n    children: serverError || \"Unknown Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 32\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-light\",\n      children: questions === null || questions === void 0 ? void 0 : questions.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: questions === null || questions === void 0 ? void 0 : questions.options.map((q, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: false,\n          name: \"options\",\n          id: `q${i}-option`,\n          onChange: () => onSelect(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-primary\",\n          htmlFor: `q${i}-option`,\n          children: q\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 2\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"check \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 2\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 1\n      }, this))\n    }, questions === null || questions === void 0 ? void 0 : questions.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Questions, \"zHzJ9DBXMSRyWc9uVW97naJqbwU=\", false, function () {\n  return [useSelector, useFetchQestion, useSelector, useDispatch];\n});\n_c = Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useFetchQestion","useSelector","updateResultAction","jsxDEV","_jsxDEV","Questions","onChecked","_s","checked","setChecked","undefined","trace","state","questions","isLoading","apiData","serverError","queue","dispatch","onSelect","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","options","map","q","type","value","name","id","onChange","htmlFor","_c","$RefreshReg$"],"sources":["D:/DURGAPRASAD FILES/PROJECT MERN/quiz_app/client/src/component/Questions.js"],"sourcesContent":["import React, { useEffect, useState ,useDispatch}  from 'react'\r\n\r\nimport { useFetchQestion } from '../hooks/FetchQuestion'\r\nimport {useSelector } from  'react-redux'\r\nimport { updateResultAction } from '../redux/result_reducer'\r\n\r\nexport default function Questions({ onChecked }) {\r\n\r\n   \r\n    const [checked, setChecked] = useState(undefined)\r\n    const { trace } =useSelector(state=> state.questions);\r\n    const [{isLoading ,apiData,serverError} ]= useFetchQestion()\r\n     \r\n\r\n    const  questions = useSelector(state => state.questions.queue[state.questions.trace])\r\nconst dispatch = useDispatch()\r\nuseEffect(() => {\r\n    dispatch(updateResultAction({trace ,checked}))\r\n},[dispatch])\r\n    \r\n    function onSelect(i){\r\n        \r\n        \r\n        onChecked(i)\r\n        setChecked(i)\r\n    }\r\n        if(isLoading) return <h3 className='text-light'>isLoading</h3>\r\n        if(serverError) return <h3 className='text-light'>{serverError  || \"Unknown Error\"}</h3>\r\n    \r\n  return (\r\n    <div className='questions'>\r\n        <h2 className='text-light'>{questions?.question}</h2>\r\n\r\n        <ul key ={ questions?.id}>\r\n            { \r\n            questions?.options.map((q, i) =>(\r\n               \r\n<li key ={i}>\r\n            <input \r\n            type=\"radio\"\r\n            value={false}\r\n            name=\"options\"\r\n            id={`q${i}-option`}\r\n            onChange = {() => onSelect(i )}\r\n            />\r\n <label className='text-primary' htmlFor={`q${i}-option`}>{q}</label>\r\n <div className='check '></div>\r\n\r\n            </li> \r\n            \r\n            \r\n            ))\r\n        \r\n        \r\n        }\r\n        </ul>\r\n        </div>\r\n)\r\n  \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}