{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\nimport { getServerData } from \"../helper/helper\";\n\n/** fetch question hook to fetch api data and set value to store */\n// Import statements...\n\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`http://localhost:5000/api/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false,\n            apiData: questions\n          }));\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Available\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n\n  // Return statement...\n\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","Action","getServerData","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["C:/Dp files/PROJECT MERN/quiz_app/client/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\n/** redux actions */\r\nimport * as Action from '../redux/question_reducer'\r\nimport { getServerData } from \"../helper/helper\";\r\n\r\n/** fetch question hook to fetch api data and set value to store */\r\n// Import statements...\r\n\r\nexport const useFetchQestion = () => {\r\n    const dispatch = useDispatch();   \r\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\r\n\r\n    useEffect(() => {\r\n        setGetData(prev => ({ ...prev, isLoading: true }));\r\n\r\n        (async () => {\r\n            try {\r\n               const  [{ questions, answers }]  = await getServerData(`http://localhost:5000/api/questions`,(data) => data)\r\n                if (questions.length > 0) {\r\n                    setGetData(prev => ({ ...prev, isLoading: false, apiData: questions }));\r\n                    dispatch(Action.startExamAction({ question: questions, answers }));\r\n                } else {\r\n                    throw new Error(\"No Question Available\");\r\n                }\r\n            } catch (error) {\r\n                setGetData(prev => ({ ...prev, isLoading: false, serverError: error }));\r\n            }\r\n        })();\r\n    }, [dispatch]);\r\n\r\n    // Return statement...\r\n\r\n\r\n    return [getData, setGetData];\r\n\r\n}\r\n\r\n/** MoveAction Dispatch function */\r\nexport const MoveNextQuestion = () => async (dispatch) => {\r\n    try {\r\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n/** PrevAction Dispatch function */\r\nexport const MovePrevQuestion = () => async (dispatch) => {\r\n    try {\r\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;;AAGzC;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;AACnD,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEH,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAElD,CAAC,YAAY;MACT,IAAI;QACD,MAAO,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAI,MAAMX,aAAa,CAAE,qCAAoC,EAAEY,IAAI,IAAKA,IAAI,CAAC;QAC3G,IAAIF,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;UACtBR,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEH,SAAS,EAAE,KAAK;YAAEC,OAAO,EAAEG;UAAU,CAAC,CAAC,CAAC;UACvEP,QAAQ,CAACJ,MAAM,CAACe,eAAe,CAAC;YAAEC,QAAQ,EAAEL,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QACtE,CAAC,MAAM;UACH,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZZ,UAAU,CAACI,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,SAAS,EAAE,KAAK;UAAEE,WAAW,EAAES;QAAM,CAAC,CAAC,CAAC;MAC3E;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;;EAEd;;EAGA,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAEhC,CAAC;;AAED;AAAAH,EAAA,CA7BaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA6BhC,OAAO,MAAMoB,gBAAgB,GAAGA,CAAA,KAAM,MAAOf,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACJ,MAAM,CAACoB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACJ,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}